package com.icia.abstracts;

import java.util.*;

/*
 * 	참조변수는 부모 클래스 : 부모 클래스의 참조변수를 처리할 수 있으면 모든 자식 객체도 처리할 수 있다
 *  	즉 강아지를 파라미터로 받는 함수는 고양이를 처리할 수 없다 -> 재사용이 불가능
 *  	Pet을 파라미터로 받으면 함수는 고양이가 추가 처리되더라도 처리할 수 있다
 *  재사용성을 높이려면 모든 Pet의 동작은 동일하게 만들어야 한다
 *  	물을마신다()의 세부 구현은 다르다(고양이와 개는 물마시는 방법이 다르다)
 *  	동작의 이름은 같아야 한다
 *  부모 클래스는 메소드의 이름을 정해주는 역할 - 구체적인 코드를 넣을 수 없다 -> 추상 메소드
 *  	추상 메소드를 가지는 클래스는 객체를 생성할 수 없다(추상 클래스) 
 *  	이클립스는 추상 클래스에 에러를 낸다 -> 에러를 보고 개발자가 "아 내가 만들어야 할 메소드가 있구나"
 *  
 *  추상 클래스 - 추상 메소드를 가진다
 *  인터페이스 - 추상 메소드와 상수만을 가진다
 */
interface BoardService {
	public void write(Board board);
	public Board read(int boardNo);
	public List<Board> list(int pageno);
	public void update(int boardNo, String title, String content);
	public void delete(int boardNo);
}

class BoardServiceImpl implements BoardService {
	public void write(@NotNull Board board) {
		if(board==null) {
			
		}
		if(Objects.isNull(board)==true) {
			
		}
	}
}
public class Test1 {

}





package com.icia.abstracts;
// 인터페이스는 표준, 추상클래스는 기본 구현

// 웹 서버에서 실행하는 자바 클래스 -> Servlet(톰캣이 돌려줄 수 있는 자바 표준)
interface Servlet {
	// 서블릿이 태어나서 살다가 죽는다 -> life cycle 메소드(수명주기 메소드, 생명주기 메소드)
	public void init();
	public void service();
	public void destory();
}

abstract class GenericServlet implements Servlet {
	@Override
	public void init() {
		System.out.println("응애");
	}
	@Override
	public void destory() {
		System.out.println("가는 건 똑같아");
	}
}

public class Test2 {

}


package com.icia.abstracts;

import java.awt.event.*;
import java.util.*;
import java.util.stream.*;

import javax.swing.*;

// 인터페이스 -> 표준 -> 메소드 이름과 순서
// 이벤트처리하려면 jQuery의 경우 $(선택자).click(function(e) { });
// 	이벤트 소스 - 이벤트 이름과 객체 - 이벤트 핸들러(익명함수로 만들어서 파라미터로 넘겨버렸다)
// button - ActionEvent - 자바는 함수이름을 생략할 수 없다 -> 이름을 붙여야 한다 -> 이름을 통일하자

// swing 패키지는 자바 1.2에 추가된 패키지 -> 고전적인 의미의 extends를 사용한다
// JFrame에 생성자에 "hello" super("hello")

class MyApp extends JFrame implements ActionListener {
	private JButton btn = new JButton("클릭");
	public MyApp() {
		super("hello");
		// $(btn).click(actionPerformed); -> 자바에서는 메소드 이름이 직접 못오고 객체 이름이 와야 한다
		// btn의 ActionEvent를 처리하는 actionPerformed는 내 안에 있어
		btn.addActionListener(this);
		add(btn);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		System.out.println("버튼 클릭");
	}
}

public class Test3 {
	public static void main(String[] args) {
		// 참조 변수 없는 객체 -> 익명 객체
		MyApp myApp = new MyApp();
	}
}



package com.icia.abstracts;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

class MyApp4 extends JFrame implements ActionListener {
	private JButton btn1 = new JButton("왼쪽");
	private JButton btn2 = new JButton("오른쪽");
	public MyApp4() {
		btn1.addActionListener(this);
		btn2.addActionListener(this);
		add(btn1, BorderLayout.WEST);
		add(btn2, BorderLayout.EAST);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// 객체를 등호로 비교하면 hashCode를 비교한다
		// if(e.getActionCommand()=="왼쪽")
		if(e.getActionCommand().equals("왼쪽"))
			System.out.println("왼쪽 버튼 클릭");
		else
			System.out.println("오른쪽 버튼 클릭");
	}
}

public class Test4 {
	public static void main(String[] args) {
		new MyApp4();
	}
}


package com.icia.abstracts;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

// btn1과 btn2의 이벤트 핸들러를 따로 만들자 -> 클래스가 2개 있어야 한다
class LeftBtnHandler implements ActionListener {
	@Override
	public void actionPerformed(ActionEvent e) {
		System.out.println("왼쪽 버튼 클릭");
	}
}
class RightButtonHandler implements ActionListener {
	@Override
	public void actionPerformed(ActionEvent e) {
		System.out.println("오른쪽 버튼 클릭");
	}
}

class MyApp5 extends JFrame {
	private JButton btn1 = new JButton("왼쪽");
	private JButton btn2 = new JButton("오른쪽");
	public MyApp5() {
		btn1.addActionListener(new LeftBtnHandler());
		btn2.addActionListener(new RightButtonHandler());
		add(btn1, BorderLayout.WEST);
		add(btn2, BorderLayout.EAST);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
}
public class Test5 {
	public static void main(String[] args) {
		new MyApp5();
	}
}


package com.icia.abstracts;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

// 5번 예제의 문제 : LeftBtnHandler, RightBtnHandler는 독립적인 클래스인가?
// 				 구별은 필요하지만 독립적이지는 않다(MyApp6을 벗어나면 의미가 없다) -> MyApp6 내부에 위치하게 한다
class MyApp6 extends JFrame {
	// 내부 클래스의 이름은 외부클래스$내부클래스 -> MyApp6$LeftBtnHandler
	class LeftBtnHandler implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("왼쪽 버튼 클릭");
		}
	}
	class RightButtonHandler implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("오른쪽 버튼 클릭");
		}
	}
	
	private JButton btn1 = new JButton("왼쪽");
	private JButton btn2 = new JButton("오른쪽");
	public MyApp6() {
		btn1.addActionListener(new LeftBtnHandler());
		btn2.addActionListener(new RightButtonHandler());
		add(btn1, BorderLayout.WEST);
		add(btn2, BorderLayout.EAST);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
}
public class Test6 {
	public static void main(String[] args) {
		new MyApp6();
	}
}



package com.icia.abstracts;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

// 내부 클래스의 이름을 생략하자 1단계 - 인터페이스의 객체를 만들자
class MyApp7 extends JFrame {
	// 인터페이스의 객체 생성 불가능 -> 추상 메소드 때문에
	// 그러면 객체를 new하는 순간에 추상 메소드를 만들어버리자
	ActionListener leftHandler = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("왼쪽 버튼 클릭");
		}
	};
	ActionListener rightHandler = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("오른쪽 버튼 클릭");
		}
	};
	
	private JButton btn1 = new JButton("왼쪽");
	private JButton btn2 = new JButton("오른쪽");
	public MyApp7() {
		btn1.addActionListener(leftHandler);
		btn2.addActionListener(rightHandler);
		add(btn1, BorderLayout.WEST);
		add(btn2, BorderLayout.EAST);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
}
public class Test7 {
	public static void main(String[] args) {
		new MyApp7();
	}
}



package com.icia.abstracts;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;


// 내부 클래스의 이름을 생략하자 2단계 - 1단계 예제에서 leftHandler, rightHandler란 이름이 있었다
//							  - addActionListener하는 순간에 ActionListener 객체를 만들어 버리자
class MyApp8 extends JFrame {
	private JButton btn1 = new JButton("왼쪽");
	private JButton btn2 = new JButton("오른쪽");
	public MyApp8() {
		btn1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("왼쪽 버튼 클릭");
			}
		});
		
		// js의 화살표 함수 -> 자바는 Lambda 함수(인터페이스가 파라미터일 때만 사용 가능)
		//				    자바는 인터페이스를 자동완성 -> 메소드가 하나인 인터페이스만 자동 완성이 가능
		//					@FunctionInterface(추상 메소드를 하나만 가진다)의 경우만
		// function sum(x, y) { return x+y; } ==> (x, y)=> { return x+y; }
		// function sum(x) { return x; } ===> (x)=>{ return x; }
		//								 ===>  x=> return x;
		
		btn2.addActionListener(e-> System.out.println("오른쪽 버튼 클릭"));
		add(btn1, BorderLayout.WEST);
		add(btn2, BorderLayout.EAST);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(400, 400);
		setVisible(true);
	}
}
public class Test8 {
	public static void main(String[] args) {
		new MyApp8();
	}
}
