input 태그안에 required 입력 시, 입력을 하지 않으면 "이 필드는 반드시 입력해야 합니다." 라는 문구가 뜬다.

&nbsp;      1Byte space

<select multiple="multiple"> option을 여러개 선택할 수 있다.

메타데이터 : 데이터를 설명하는 데이터, 서식이나 문서의 구조, 문서의 내용이 아닌 부가 정보

마크업 : 태그를 이용해서 메타데이터를 표현하는 방법

XML : 문서의 구조, 전체를 태그로 무조건 감싸줘야 한다.

HTML : 웹 페이지 마크업에 사용

대표적인 마크업 언어 : XML, HTML → 프레임워크 : 일을 하는 방법과 절차를 정해놓은 소프트웨어

Protocol 통신규약 : TCP/IP, http, smtp, ftp

TCP : IP 위에서 실제로 통신 작업

IP : IP 주소를 규정

DNS(Domain name System)를 이용해 도메인 주소를 IP 주소로 변환한다.

Port 포트 : 인터넷을 이용하는 프로그램을 구별하는 번호

front에서 back으로 값을 넘기는 방식 : 사용자 입력을 받아서 urlencoded형식으로 전송 

urlencoded : 이름 = 값

상태코드 : 400(타입에러), 403(권한없음), 404(not found), 405(잘못된method), 500(값틀림)

form안의 button은 submit으로 동작, submit하기 싫으면 button type="button"으로 지정

select에 value 값이 없으면 option의 내용이 서버로 넘어가고 value 값이 있으면 value가 넘어간다. option에 disabled+selected 조합을 넣으면 서버로 넘어가지 않는다.

isNaN()의 결과값은 boolean

본문 영역인 section에는 height값을 적용 할 수 없다. 그래서 최소 높이 값 적용을 위해 min-height를 사용한다.

배열의 마지막 요소를 선택할 때 fruits[fruits.length-1]

파일 시스템의 문제 : 데이터 종속과 중복의 문제

DBMS(DataBase Management System) : 데이터베이스 관리 시스템으로 모든 사용자는 DBMS를 통해서만 데이터베이스에 접근할 수 있다.

현재 프로그래밍의 기본 개념은 객체 지향 프로그래밍(Object Oriented Programming)

BOM(Browser Object Model) : JS가 웹 브라우저를 객체로 취급하는 방식 → window, history, location, document, navigator

DOM(Document Object Model) : document 객체를 가지고 작업

sts를 초기상태로 되돌리고 싶으면 .metadata 폴더를 강제로 삭제

perspective : 프로젝트를 개발할 때 유용하게 사용할 수 있는 view들을 미리 묶어 이름을 붙여 놓은 것

callback 함수 : 프로그래머가 작성했는데 언제 실행되는지는 모른다. 대표적으로 이벤트 핸들러 addEventLister

데이터베이스를 구성하는 객체의 종류 : user, table, view(하나 이상의 테이블로부터 데이터를 선택하여 만든 부분 집합이자 가상의 테이블), index, sequence, constraint

자바의 모든 함수는 method → 개발할 때 클래스부터 만들어야 한다. main 메소드는 프로그램의 시작을 담당하는 함수 

보일러 플레이트 : 반복적으로 나타나는 코드

package를 만드는 이유 : 클래스를 저장하는 폴더, 함수이름이 중복돼도 상관없게, 클래스 소속이므로 클래스가 다르면 메소드 이름이 같아도 된다. 동일한 이유로 클래스가 겹쳐도 package가 다르다면 상관없다. package 이름이 겹치지 않게 하기 위해 자신의 소속기관 url 주소를 거꾸로 사용하는게 관용

System : 컴퓨터를 상징하는 class, System.out(모니터), System.in(키보드)

클래스 이름은 소스 파일명과 동일해야 하며, 대소문자도 일치해야 한다.

JavaScript와 jQuery 이벤트의 차이점은 JS는 이벤트 핸들러를 하나만 지정할 수 있지만 jQuery는 여러개 작성할 수 있다. $(document).ready(function(){}

jQuery each 반복문 : 파라미터로 익명함수 

자바의 타입 변환 : byte < short < int < long < float < double

메모리 영역 stack, heap

자바 stack : 기본타입과 메소드, { 열면 만들고 닫으면 파괴 → 자바가 문법에 따라 자동으로 관리

자바 heap : 객체, 필요할 때 new로 만들고 불필요하면 메모리를 회수한다. 자바는 프로그래머가 아닌 자바가 메모리 회수를 담당 garbage collection, gc)

jQuery class가 하나면 .attr 두개면 .addClass

요소붙이기 : 자식.appendTo(부모)

자바스크립트 객체 : 객체를 문자열로 표현하는 표준 JSON 형식, 자바스크립트는 json을 직접 처리가능하지만 자바에서는 외부 프로그램의 도움이 필요하다.

JSON(JavaScript Object Notation) : 객체를 문자열로 표현하는 방식

form 안에 username이 없으면 서버에서 username의 값은 null, form 안에 username이라는 name이 있는데 입력하지 않았다 → ?username=&password=1234 서버에서 username의 값은 빈문자열("")

form을 서버로 넘기는 방법 : urlencoded, json

자바는 크기가 정해져있지 않은 배열 클래스를 제공한다. ArrayList 

자바스크립트는 배열을 원래 ArrayList처럼 사용한다.

of 반복문 :  자바는 기본 타입에 대해 클래스를 모두 제공. int에 대한 클래스는 Integer

ajax : 서버에 비동기 요청을 보내는 표준. vanilla JavaScript로 작성할 경우 상당히 복잡하기 때문에 jQuery에 내장되어있는 라이브러리 ajax를 사용.

FormData() : 파일을 업로드 하는 경우 JS의 FromData 객체를 사용해야 한다. multipart인 form을 읽어와서 FormData 객체 생성하기
	const formData = 
		new FromData(document.getElementById(폼 아이디));
	const formData = new FormData($('#폼 아이디')[0]);

$('#photo')[0] → <input type='file' id='photo'> file 요소는 multiple을 지정한 경우 파일을 여러개 선택하는게 가능하기 때문에 .files[0]라는 배열이 생성

자바 클래스의 구성 멤버 : 필드, 생성자, 메소드

자바 필드 : final(객체마다 값이 다르고 변경할 수 없다), static(모든 객체가 공유, 변경가능), final static(모든 객체가 공유하는 변경 불가능한 값)

객체지향 구성요소 : 캡슐화, 정보은닉, 상속, 다형성

오버로딩 : 파라미터의 수나 자료형이 다르다면 메소드의 이름이 같아도 상관없다.

오버라이드 : 상속 기반, 부모와 자식이 동일한 메소드를 가지고 이때 this의 메소드가 실행된다.

querystring : GET방식에서 주소표시줄에 urlencoded가 찍혀나오는 것

VO : 사용 되는 값이 객체로 표현 되며, 값 변경이 없는 경우를 말한다.

DTO : 데이터의 전송을 위한 객체이며, 비즈니스 로직까지 담아서 사용하기도 한다.

singleton pattern : 객체의 인스턴스가 오직 1개만 생성되는 패턴. 싱글톤패턴을 구현하는 방법 중에 가장 안전한 것은 객체를 미리 생성해두고 가져오는 방법

SOLID
S : 단일 책임 원칙 
O : 개방 폐쇄 원칙 (기능의 개선에 대해서는 열려있고 코드의 변경에 대해서는 닫혀 있다)
L : Liskov 치환 원칙 (부모와 자식은 똑같이 생겨야한다. extends 금지)
I : 인터페이스 분리 원칙
D : 의존성 역전 원칙 (스프링에서는 제어의 역전 원칙IoC)

@Builder의 기본값은 null이다. 특정 소속에 기본값을 지정하고 싶을 때 @Builder.Default를 사용한다.












